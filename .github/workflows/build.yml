---
# Github Actions build for itsHenry35/gofakes3
# -*- compile-command: "yamllint -f parsable build.yml" -*-

name: build

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        required: true
        default: true

jobs:
  build:
    if: ${{ github.event.inputs.manual == 'true' || (github.repository == 'itsHenry35/gofakes3' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name)) }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'linux_386', 'mac_amd64', 'mac_arm64', 'windows', 'go1.21', 'go1.22']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '1.23'

          - job_name: linux_386
            os: ubuntu-latest
            go: '1.23'

          - job_name: mac_amd64
            os: macos-latest
            go: '1.23'

          - job_name: mac_arm64
            os: macos-latest
            go: '1.23'

          - job_name: windows
            os: windows-latest
            go: '1.23'

          - job_name: go1.21
            os: ubuntu-latest
            go: '1.21'

          - job_name: go1.22
            os: ubuntu-latest
            go: '1.22'

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Print Go version and environment
        shell: bash
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nSystem environment:\n\n"
          env

      - name: Go module cache
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build
        shell: bash
        run: |
          go install ./...

      - name: Run tests
        shell: bash
        run: |
          go test ./...

      - name: Race test
        shell: bash
        run: |
          go test -race ./...

  lint:
    if: ${{ github.event.inputs.manual == 'true' || (github.repository == 'itsHenry35/gofakes3' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name)) }}
    timeout-minutes: 30
    name: "lint"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Code quality test
        uses: golangci/golangci-lint-action@v4
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest

      # Run govulncheck on the latest go version, the one we build binaries with
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          check-latest: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Scan for vulnerabilities
        run: govulncheck ./...
